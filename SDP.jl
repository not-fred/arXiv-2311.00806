"""
    julia SDP.jl d‚ÇÅ d‚ÇÇ K‚ÇÅ K‚ÇÇ [file]

Script used in [arXiv:2311.00806](https://arxiv.org/abs/2311.00806) for
maximising the score over positive partial transpose states of a j‚ÇÅ ‚äó j‚ÇÇ
spin pair, to find the upper bound of the separable bound for a precession-
based entanglement witness. See the paper for more detail.

# Arguments
- `d‚ÇÅ::Integer`: Dimension d‚ÇÅ = 2j‚ÇÅ + 1 of the first spin system
- `d‚ÇÇ::Integer`: Dimension d‚ÇÅ = 2j‚ÇÇ + 1 of the first spin system
- `K‚ÇÅ::Integer`: Minimum (odd) number of measurement settings
- `K‚ÇÇ::Integer`: Maximum (odd) number of measurement settings
- `file::String`: Data will be saved in $file-K$K.csv. Returns to standard output if none specified

# Package versions
For the reported results, version 1.6.6 of `julia` was used, with the packages
- `JuMP`: v1.12.0
- `COSMO`: v0.8.8
- `SCS`: v1.1.2
- `WignerSymbols`: v2.0.0
- `Memoization`: v0.2.1
"""

dArr  = parse(Int,ARGS[1]):parse(Int,ARGS[2])
Karr  = parse(Int,ARGS[3]):2:parse(Int,ARGS[4])
file  = length(ARGS) ‚â• 5 ? ARGS[5] : false

dArr = 4:5
Karr = [3]

# Tolerence for SDP solver to stop
Œµ = 1E-5

# Number of threads for parallel computation
numThreads = Threads.nthreads()

# Standard libraries
using LinearAlgebra, SparseArrays, Dates, DelimitedFiles

# Other libraries
using JuMP, COSMO, SCS, WignerSymbols, Memoization
import Convex.partialtranspose

"""
    binCoef(x)

Returns 2‚ÅªÀ£ √ó choose(x,‚åäx/2‚åã). For `x` ‚â§ 62, the exact value is returned.
For x > 62, a series where log(binCoef(x)) is of order O(1/x¬≤¬π) is used.
"""
function binCoef(x)
    x = 2*(x√∑2)
    if x ‚â§ 62
        return binomial(BigInt(x),BigInt(x√∑2))/2^x
    else
        # We use 2‚ÅªÀ£ √ó choose(x,‚åäx/2‚åã) = exp(f(x) + O(1/x¬≤¬π)) √ó ‚àö(2/(œÄ*x))
        x = BigFloat(x)
        fx = exp(
                -1/4x + 1/24x^3 - 1/20x^5 + 17/112x^7 - 31/36x^9 +
                691/88x^11 - 5461/52x^13 + 929569/480x^15 - 3202291/68x^17 + 221930581/152x^19
            )
        return fx/‚àö(œÄ*x/2)
    end
end

"""
    pTranspose(œÅ,d‚ÇÅ::Int=Int(‚àösize(œÅ)[1]),d‚ÇÇ::Int=Int(‚àösize(œÅ)[1]))

Returns the partial transpose of `œÅ`, defined by ‚ü®n‚ÇÅ,n‚ÇÇ|œÅ·µÄ¬≤|m‚ÇÅ,m‚ÇÇ‚ü© = ‚ü®n‚ÇÅ,m‚ÇÇ|œÅ|m‚ÇÅ,n‚ÇÇ‚ü©
"""
function pTranspose(œÅ,d‚ÇÅ::Int=Int(‚àösize(œÅ)[1]),d‚ÇÇ::Int=Int(‚àösize(œÅ)[1]))
    œÅ·µÄ¬≤ = copy(œÅ)*0
    for n‚ÇÅ ‚àà 0:d‚ÇÅ-1, n‚ÇÇ ‚àà 0:d‚ÇÇ-1, m‚ÇÅ ‚àà 0:d‚ÇÅ-1, m‚ÇÇ ‚àà 0:d‚ÇÇ-1
        # ‚ü®n‚ÇÅ,n‚ÇÇ|œÅ·µÄ¬≤|m‚ÇÅ,m‚ÇÇ‚ü© = ‚ü®n‚ÇÅ,m‚ÇÇ|œÅ|m‚ÇÅ,n‚ÇÇ‚ü©
        (ishermitian(œÅ·µÄ¬≤) ? œÅ·µÄ¬≤.data : œÅ·µÄ¬≤)[n‚ÇÅ*d‚ÇÇ + n‚ÇÇ + 1, m‚ÇÅ*d‚ÇÇ + m‚ÇÇ + 1] = œÅ[n‚ÇÅ*d‚ÇÇ + m‚ÇÇ + 1, m‚ÇÅ*d‚ÇÇ + n‚ÇÇ + 1]
    end
    return œÅ·µÄ¬≤
end

"""
    sgnJx(j,m‚ÇÅ,m‚ÇÇ)

Returns ‚ü®j,m‚ÇÅ|sgn(J‚Çì)|j,m‚ÇÇ‚ü©; see Eq. (B5) of [arXiv:2311.00806](https://arxiv.org/abs/2311.00806)
"""
@memoize function sgnJx(j,m‚ÇÅ,m‚ÇÇ)
    if (m‚ÇÅ-m‚ÇÇ)%2 == 0
        return 0
    else
        return (-1)^((m‚ÇÇ-m‚ÇÅ-1)√∑2)*‚àö(
            (j+m‚ÇÅ)^((j+m‚ÇÅ)%2)*
            (j-m‚ÇÅ)^((j-m‚ÇÅ)%2)*
            (j+m‚ÇÇ)^((j+m‚ÇÇ)%2)*
            (j-m‚ÇÇ)^((j-m‚ÇÇ)%2)*
            binCoef(j+m‚ÇÅ)*binCoef(j-m‚ÇÅ)*
            binCoef(j+m‚ÇÇ)*binCoef(j-m‚ÇÇ)
        )/(m‚ÇÇ-m‚ÇÅ)
    end
end

"""
    genŒîQK(Karr,j‚ÇÅ,j‚ÇÇ)

Returns an array [ŒîQ_K‚ÇÅ, ŒîQ_K‚ÇÇ, ‚Ä¶] for K‚Çó ‚àà Karr,
where Q_K = ‚àë‚Çñ pos[J‚Çñ]/K and ŒîQ_K := 2Q_K ‚àí ùüô;
see Eq. (3) of [arXiv:2311.00806](https://arxiv.org/abs/2311.00806).
ŒîQ_K is returned in the product basis of j‚ÇÅ ‚äó j‚ÇÇ
"""
function genŒîQK(Karr,j‚ÇÅ,j‚ÇÇ)
    # From addition of angular momentum, |j‚ÇÅ-j‚ÇÇ| ‚â§ j ‚â§ j‚ÇÅ+j‚ÇÇ,
    # where j is the spin associated with the irreducible block
    jArr = abs(j‚ÇÇ-j‚ÇÅ):(j‚ÇÇ+j‚ÇÅ)
    
    # Get the dimensions from the spin arguments
    d‚ÇÅ = Int(2j‚ÇÅ+1)
    d‚ÇÇ = Int(2j‚ÇÇ+1)
    
    # Cummulative dimensions of the block sum
    # If index 0+1 to d‚ÇÅ is the first block, d‚ÇÅ+1 to d‚ÇÇ is
    # the second block, etc., then this array contains
    # [0,d‚ÇÅ,d‚ÇÇ,d‚ÇÉ,‚Ä¶]
    cdArr = [0;cumsum(2jArr .+ 1)[1:end-1]]
    
    # Unitary to be populated with the Clebsch‚ÄìGordan coefficients
    U = spzeros(d‚ÇÅ*d‚ÇÇ,d‚ÇÅ*d‚ÇÇ)
    
    # Array that contains Q_K, in the block-diagonal basis
    ŒîQKarr = [spzeros(d‚ÇÅ*d‚ÇÇ,d‚ÇÅ*d‚ÇÇ) for _ in Karr]
    
    # Loop through all blocks
    for iJ ‚àà 1:length(jArr)
        Œî = cdArr[iJ] + 1 # Get the index where this block starts
        j = jArr[iJ] # Spin of current block
        for m‚±º ‚àà -j:j # Loop through all |j,m‚±º‚ü©
            iM‚±º = Int(Œî+m‚±º+j) # Index of |j,m‚±º‚ü©
            for iK in 1:length(Karr)
                K = Karr[iK]
                # Loop through |j,m‚Çñ‚ü©, according to block diagonal condition: see
                # Eq. (B2) & (B3) of [arXiv:2311.00806](https://arxiv.org/abs/2311.00806)
                for m‚Çñ ‚àà m‚±º+K:2K:j
                    iM‚Çñ = Int(Œî+m‚Çñ+j)
                    ŒîQKarr[iK][iM‚±º,iM‚Çñ] = ŒîQKarr[iK][iM‚Çñ,iM‚±º] = sgnJx(j,m‚±º,m‚Çñ)
                end
            end
            # Populate the Clebsch‚ÄîGordan coefficients
            for m‚ÇÅ ‚àà max(-j‚ÇÅ,m‚±º-j‚ÇÇ):min(j‚ÇÅ,m‚±º+j‚ÇÇ)
                U[Int((j‚ÇÅ+m‚ÇÅ)*d‚ÇÇ + (j‚ÇÇ+m‚±º-m‚ÇÅ) + 1),iM‚±º] = clebschgordan(j‚ÇÅ,m‚ÇÅ,j‚ÇÇ,m‚±º-m‚ÇÅ,j)
            end
        end
    end
    # Return QK in the product basis of j‚ÇÅ and j‚ÇÇ
    return [sparse(Hermitian(Float64.(U*ŒîQK*U'))) for ŒîQK in ŒîQKarr]
end

# Generate array to contain separable bounds and output strings
Parr = zeros(length(dArr),length(dArr),length(Karr))
outputStrings = ["" for _ in 1:length(dArr), _ in 1:length(dArr), _ in 1:length(Karr)]

# Load data if partial computation was previously done
for iK in 1:length(Karr)
    K = Karr[iK]
    try
        dat = readdlm("$file-K$K.csv",',')
        for j ‚àà 1:length(dat[:,1])
            cd‚ÇÅ,cd‚ÇÇ,cK,cP = dat[j,:]
            if cK == K
                iD‚ÇÅ = indexin(cd‚ÇÅ,dArr)[1]
                iD‚ÇÇ = indexin(cd‚ÇÇ,dArr)[1]
                # If data already exists, copy into array
                if !isnothing(iD‚ÇÅ) && !isnothing(iD‚ÇÇ)
                    Parr[iD‚ÇÅ,iD‚ÇÇ,iK] = cP
                end
            end
        end
    catch
    end
end

# Loop through all j‚ÇÇ ‚â• j‚ÇÅ
for j ‚àà 1:length(dArr)
    for k ‚àà j:length(dArr)
        if all(Parr[j,k,:] .> 0)
            # Skip this (d‚ÇÅ,d‚ÇÇ) pair if separable bound has been calculated for all values of K
            continue
        end
        startTime = now()
        println("$j of $(length(dArr)), $(k-j+1) of $(length(dArr)-j+1)")
        d‚ÇÅ = dArr[j]
        d‚ÇÇ = dArr[k]
        if d‚ÇÅ+d‚ÇÇ < minimum(Karr) + 2
            # Known to be trivial when j‚ÇÅ + j‚ÇÇ < K/2
            Parr[j,k,:] .= 1/2
        else
            println("Generating Observables‚Ä¶")
            ŒîQKarr = genŒîQK(Karr,(d‚ÇÅ-1)//2,(d‚ÇÇ-1)//2)

            println("Starting SDP‚Ä¶")
            try
                # Use COSMO solver to solve the SDP
                model = Model(COSMO.Optimizer)
                
                # Constraint œÅ to be a density operator: œÅ ‚™∞ 0 and tr(œÅ) = 1
                @variable(model, œÅ[1:d‚ÇÅ*d‚ÇÇ,1:d‚ÇÅ*d‚ÇÇ] ‚àà HermitianPSDCone())
                @constraint(model, tr(œÅ)==1)
                
                # Partial transpose constraint: œÅ·µÄ¬≤ = œÅ
                @constraint(model, Hermitian(pTranspose(œÅ,d‚ÇÅ,d‚ÇÇ)) ‚àà HermitianPSDCone())
                
                # Loop through each number of measurements K
                for iK in 1:length(Karr)
                    if Parr[j,k,iK] > 0
                        # Skip if already calculated
                        continue
                    end
                    K = Karr[iK]
                    if d‚ÇÅ+d‚ÇÇ < K+2
                        # Known to be trivial when j‚ÇÅ + j‚ÇÇ < K/2
                        Parr[j,k,iK] = 1/2
                    else
                        # Maximise tr(œÅ ŒîQ_K/2)
                        @objective(model, Max, real(dot(ŒîQKarr[iK]/2,œÅ)))
                        MOI.set(model, MOI.RawOptimizerAttribute("max_iter"), 50_000)
                        MOI.set(model, MOI.RawOptimizerAttribute("eps_abs"), Œµ)
                        MOI.set(model, MOI.RawOptimizerAttribute("eps_rel"), Œµ)
                        optimize!(model)
                        if max(dual_objective_value(model),objective_value(model)) > 1
                            # It must be a probability, so it obviously
                            # didn‚Äôt converge if it‚Äôs not
                            throw("COSMO didn‚Äôt converge")
                        end
                        # Get the upper bound of the solution
                        Parr[j,k,iK] = max(dual_objective_value(model),objective_value(model)) + 1/2
                    end
                    outputStrings[j,k,iK] = "$d‚ÇÅ,$d‚ÇÇ,$K,$(Parr[j,k,iK])"
                    if file != false
                        open("$file-K$K.csv","a") do io
                            println(io,outputStrings[j,k,iK])
                        end
                    end
                end
            catch
                # COSMO fails sometimes, in which case we fallback onto SCS
                model = Model(SCS.Optimizer)
                @variable(model, œÅ[1:d‚ÇÅ*d‚ÇÇ,1:d‚ÇÅ*d‚ÇÇ] ‚àà HermitianPSDCone())
                @constraint(model, tr(œÅ)==1)
                @constraint(model, Hermitian(pTranspose(œÅ,d‚ÇÅ,d‚ÇÇ)) ‚àà HermitianPSDCone())
                for iK in 1:length(Karr)
                    if Parr[j,k,iK] > 0
                        continue
                    end
                    K = Karr[iK]
                    if d‚ÇÅ+d‚ÇÇ < K+2
                        Parr[j,k,iK] = 1/2
                    else
                        @objective(model, Max, real(dot(ŒîQKarr[iK]/2,œÅ)))
                        MOI.set(model, MOI.RawOptimizerAttribute("max_iters"), 50_000)
                        MOI.set(model, MOI.RawOptimizerAttribute("eps_abs"), Œµ)
                        MOI.set(model, MOI.RawOptimizerAttribute("eps_rel"), Œµ)
                        optimize!(model)
                        Parr[j,k,iK] = max(dual_objective_value(model),objective_value(model)) + 1/2
                    end
                    outputStrings[j,k,iK] = "$d‚ÇÅ,$d‚ÇÇ,$K,$(Parr[j,k,iK])"
                    if file != false
                        open("$file-K$K.csv","a") do io
                            println(io,outputStrings[j,k,iK])
                        end
                    end
                end
            end
        end
        println("$j of $(length(dArr)), $(k-j+1) of $(length(dArr)-j+1) end at time: $(now()), time taken: $(now()-startTime)")
        println("")
    end
end

# If no file was specified, print out the results
if file == false
    println(join([outputStrings[j,k] for j ‚àà 1:length(outputStrings[:,1]), k ‚àà 1:length(outputStrings[1,:]) if k ‚â• j],"\n"))
end
